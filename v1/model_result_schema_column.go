/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ResultSchemaColumn struct for ResultSchemaColumn
type ResultSchemaColumn struct {
	// Name of the column
	Name string `json:"name"`
	Type DataType `json:"type"`
}

// NewResultSchemaColumn instantiates a new ResultSchemaColumn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultSchemaColumn(name string, type_ DataType) *ResultSchemaColumn {
	this := ResultSchemaColumn{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewResultSchemaColumnWithDefaults instantiates a new ResultSchemaColumn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultSchemaColumnWithDefaults() *ResultSchemaColumn {
	this := ResultSchemaColumn{}
	return &this
}

// GetName returns the Name field value
func (o *ResultSchemaColumn) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ResultSchemaColumn) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ResultSchemaColumn) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ResultSchemaColumn) GetType() DataType {
	if o == nil {
		var ret DataType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResultSchemaColumn) GetTypeOk() (*DataType, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResultSchemaColumn) SetType(v DataType) {
	o.Type = v
}

func (o ResultSchemaColumn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableResultSchemaColumn struct {
	value *ResultSchemaColumn
	isSet bool
}

func (v NullableResultSchemaColumn) Get() *ResultSchemaColumn {
	return v.value
}

func (v *NullableResultSchemaColumn) Set(val *ResultSchemaColumn) {
	v.value = val
	v.isSet = true
}

func (v NullableResultSchemaColumn) IsSet() bool {
	return v.isSet
}

func (v *NullableResultSchemaColumn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultSchemaColumn(val *ResultSchemaColumn) *NullableResultSchemaColumn {
	return &NullableResultSchemaColumn{value: val, isSet: true}
}

func (v NullableResultSchemaColumn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultSchemaColumn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


