/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// EventData - struct for EventData
type EventData struct {
	EventDataJobException *EventDataJobException
	EventDataNewStatus *EventDataNewStatus
}

// EventDataJobExceptionAsEventData is a convenience function that returns EventDataJobException wrapped in EventData
func EventDataJobExceptionAsEventData(v *EventDataJobException) EventData {
	return EventData{ EventDataJobException: v}
}

// EventDataNewStatusAsEventData is a convenience function that returns EventDataNewStatus wrapped in EventData
func EventDataNewStatusAsEventData(v *EventDataNewStatus) EventData {
	return EventData{ EventDataNewStatus: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EventData) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EventDataJobException
	err = json.Unmarshal(data, &dst.EventDataJobException)
	if err == nil {
		jsonEventDataJobException, _ := json.Marshal(dst.EventDataJobException)
		if string(jsonEventDataJobException) == "{}" { // empty struct
			dst.EventDataJobException = nil
		} else {
			match++
		}
	} else {
		dst.EventDataJobException = nil
	}

	// try to unmarshal data into EventDataNewStatus
	err = json.Unmarshal(data, &dst.EventDataNewStatus)
	if err == nil {
		jsonEventDataNewStatus, _ := json.Marshal(dst.EventDataNewStatus)
		if string(jsonEventDataNewStatus) == "{}" { // empty struct
			dst.EventDataNewStatus = nil
		} else {
			match++
		}
	} else {
		dst.EventDataNewStatus = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EventDataJobException = nil
		dst.EventDataNewStatus = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(EventData)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(EventData)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EventData) MarshalJSON() ([]byte, error) {
	if src.EventDataJobException != nil {
		return json.Marshal(&src.EventDataJobException)
	}

	if src.EventDataNewStatus != nil {
		return json.Marshal(&src.EventDataNewStatus)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EventData) GetActualInstance() (interface{}) {
	if obj.EventDataJobException != nil {
		return obj.EventDataJobException
	}

	if obj.EventDataNewStatus != nil {
		return obj.EventDataNewStatus
	}

	// all schemas are nil
	return nil
}

type NullableEventData struct {
	value *EventData
	isSet bool
}

func (v NullableEventData) Get() *EventData {
	return v.value
}

func (v *NullableEventData) Set(val *EventData) {
	v.value = val
	v.isSet = true
}

func (v NullableEventData) IsSet() bool {
	return v.isSet
}

func (v *NullableEventData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventData(val *EventData) *NullableEventData {
	return &NullableEventData{value: val, isSet: true}
}

func (v NullableEventData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


