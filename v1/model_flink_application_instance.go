/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FlinkApplicationInstance An instance of a Flink Application
type FlinkApplicationInstance struct {
	// API version for spec
	ApiVersion string `json:"apiVersion"`
	// Kind of resource - set to resource type
	Kind string `json:"kind"`
	Metadata *ApplicationInstanceMetadata `json:"metadata,omitempty"`
	Status *ApplicationInstanceStatus `json:"status,omitempty"`
}

// NewFlinkApplicationInstance instantiates a new FlinkApplicationInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlinkApplicationInstance(apiVersion string, kind string) *FlinkApplicationInstance {
	this := FlinkApplicationInstance{}
	this.ApiVersion = apiVersion
	this.Kind = kind
	return &this
}

// NewFlinkApplicationInstanceWithDefaults instantiates a new FlinkApplicationInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlinkApplicationInstanceWithDefaults() *FlinkApplicationInstance {
	this := FlinkApplicationInstance{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *FlinkApplicationInstance) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *FlinkApplicationInstance) GetApiVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *FlinkApplicationInstance) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetKind returns the Kind field value
func (o *FlinkApplicationInstance) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *FlinkApplicationInstance) GetKindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *FlinkApplicationInstance) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *FlinkApplicationInstance) GetMetadata() ApplicationInstanceMetadata {
	if o == nil || o.Metadata == nil {
		var ret ApplicationInstanceMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlinkApplicationInstance) GetMetadataOk() (*ApplicationInstanceMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *FlinkApplicationInstance) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ApplicationInstanceMetadata and assigns it to the Metadata field.
func (o *FlinkApplicationInstance) SetMetadata(v ApplicationInstanceMetadata) {
	o.Metadata = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FlinkApplicationInstance) GetStatus() ApplicationInstanceStatus {
	if o == nil || o.Status == nil {
		var ret ApplicationInstanceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlinkApplicationInstance) GetStatusOk() (*ApplicationInstanceStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FlinkApplicationInstance) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ApplicationInstanceStatus and assigns it to the Status field.
func (o *FlinkApplicationInstance) SetStatus(v ApplicationInstanceStatus) {
	o.Status = &v
}

func (o FlinkApplicationInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableFlinkApplicationInstance struct {
	value *FlinkApplicationInstance
	isSet bool
}

func (v NullableFlinkApplicationInstance) Get() *FlinkApplicationInstance {
	return v.value
}

func (v *NullableFlinkApplicationInstance) Set(val *FlinkApplicationInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableFlinkApplicationInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableFlinkApplicationInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlinkApplicationInstance(val *FlinkApplicationInstance) *NullableFlinkApplicationInstance {
	return &NullableFlinkApplicationInstance{value: val, isSet: true}
}

func (v NullableFlinkApplicationInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlinkApplicationInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


