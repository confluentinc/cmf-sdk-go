/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// CatalogMetadata Metadata about the Catalog
type CatalogMetadata struct {
	// Name of the Catalog
	Name string `json:"name"`
	// Timestamp when the Catalog was created
	CreationTimestamp *string `json:"creationTimestamp,omitempty"`
	// Unique identifier of the Catalog
	Uid *string `json:"uid,omitempty"`
	// Labels of the Statement
	Labels *map[string]string `json:"labels,omitempty"`
	// Annotations of the Statement
	Annotations *map[string]string `json:"annotations,omitempty"`
}

// NewCatalogMetadata instantiates a new CatalogMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogMetadata(name string) *CatalogMetadata {
	this := CatalogMetadata{}
	this.Name = name
	return &this
}

// NewCatalogMetadataWithDefaults instantiates a new CatalogMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogMetadataWithDefaults() *CatalogMetadata {
	this := CatalogMetadata{}
	return &this
}

// GetName returns the Name field value
func (o *CatalogMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CatalogMetadata) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CatalogMetadata) SetName(v string) {
	o.Name = v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *CatalogMetadata) GetCreationTimestamp() string {
	if o == nil || o.CreationTimestamp == nil {
		var ret string
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogMetadata) GetCreationTimestampOk() (*string, bool) {
	if o == nil || o.CreationTimestamp == nil {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *CatalogMetadata) HasCreationTimestamp() bool {
	if o != nil && o.CreationTimestamp != nil {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given string and assigns it to the CreationTimestamp field.
func (o *CatalogMetadata) SetCreationTimestamp(v string) {
	o.CreationTimestamp = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *CatalogMetadata) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogMetadata) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *CatalogMetadata) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *CatalogMetadata) SetUid(v string) {
	o.Uid = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *CatalogMetadata) GetLabels() map[string]string {
	if o == nil || o.Labels == nil {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogMetadata) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *CatalogMetadata) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *CatalogMetadata) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *CatalogMetadata) GetAnnotations() map[string]string {
	if o == nil || o.Annotations == nil {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogMetadata) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *CatalogMetadata) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *CatalogMetadata) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

func (o CatalogMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.CreationTimestamp != nil {
		toSerialize["creationTimestamp"] = o.CreationTimestamp
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	return json.Marshal(toSerialize)
}

type NullableCatalogMetadata struct {
	value *CatalogMetadata
	isSet bool
}

func (v NullableCatalogMetadata) Get() *CatalogMetadata {
	return v.value
}

func (v *NullableCatalogMetadata) Set(val *CatalogMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogMetadata(val *CatalogMetadata) *NullableCatalogMetadata {
	return &NullableCatalogMetadata{value: val, isSet: true}
}

func (v NullableCatalogMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


