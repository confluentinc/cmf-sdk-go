/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// KafkaCatalogAllOf struct for KafkaCatalogAllOf
type KafkaCatalogAllOf struct {
	Metadata CatalogMetadata `json:"metadata"`
	Spec KafkaCatalogSpec `json:"spec"`
}

// NewKafkaCatalogAllOf instantiates a new KafkaCatalogAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaCatalogAllOf(metadata CatalogMetadata, spec KafkaCatalogSpec) *KafkaCatalogAllOf {
	this := KafkaCatalogAllOf{}
	this.Metadata = metadata
	this.Spec = spec
	return &this
}

// NewKafkaCatalogAllOfWithDefaults instantiates a new KafkaCatalogAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaCatalogAllOfWithDefaults() *KafkaCatalogAllOf {
	this := KafkaCatalogAllOf{}
	return &this
}

// GetMetadata returns the Metadata field value
func (o *KafkaCatalogAllOf) GetMetadata() CatalogMetadata {
	if o == nil {
		var ret CatalogMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *KafkaCatalogAllOf) GetMetadataOk() (*CatalogMetadata, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *KafkaCatalogAllOf) SetMetadata(v CatalogMetadata) {
	o.Metadata = v
}

// GetSpec returns the Spec field value
func (o *KafkaCatalogAllOf) GetSpec() KafkaCatalogSpec {
	if o == nil {
		var ret KafkaCatalogSpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *KafkaCatalogAllOf) GetSpecOk() (*KafkaCatalogSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *KafkaCatalogAllOf) SetSpec(v KafkaCatalogSpec) {
	o.Spec = v
}

func (o KafkaCatalogAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullableKafkaCatalogAllOf struct {
	value *KafkaCatalogAllOf
	isSet bool
}

func (v NullableKafkaCatalogAllOf) Get() *KafkaCatalogAllOf {
	return v.value
}

func (v *NullableKafkaCatalogAllOf) Set(val *KafkaCatalogAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaCatalogAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaCatalogAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaCatalogAllOf(val *KafkaCatalogAllOf) *NullableKafkaCatalogAllOf {
	return &NullableKafkaCatalogAllOf{value: val, isSet: true}
}

func (v NullableKafkaCatalogAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaCatalogAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


