/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatementResultAllOf struct for StatementResultAllOf
type StatementResultAllOf struct {
	Metadata StatementResultMetadata `json:"metadata"`
	Results StatementResults `json:"results"`
}

// NewStatementResultAllOf instantiates a new StatementResultAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementResultAllOf(metadata StatementResultMetadata, results StatementResults) *StatementResultAllOf {
	this := StatementResultAllOf{}
	this.Metadata = metadata
	this.Results = results
	return &this
}

// NewStatementResultAllOfWithDefaults instantiates a new StatementResultAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementResultAllOfWithDefaults() *StatementResultAllOf {
	this := StatementResultAllOf{}
	return &this
}

// GetMetadata returns the Metadata field value
func (o *StatementResultAllOf) GetMetadata() StatementResultMetadata {
	if o == nil {
		var ret StatementResultMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *StatementResultAllOf) GetMetadataOk() (*StatementResultMetadata, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *StatementResultAllOf) SetMetadata(v StatementResultMetadata) {
	o.Metadata = v
}

// GetResults returns the Results field value
func (o *StatementResultAllOf) GetResults() StatementResults {
	if o == nil {
		var ret StatementResults
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *StatementResultAllOf) GetResultsOk() (*StatementResults, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Results, true
}

// SetResults sets field value
func (o *StatementResultAllOf) SetResults(v StatementResults) {
	o.Results = v
}

func (o StatementResultAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableStatementResultAllOf struct {
	value *StatementResultAllOf
	isSet bool
}

func (v NullableStatementResultAllOf) Get() *StatementResultAllOf {
	return v.value
}

func (v *NullableStatementResultAllOf) Set(val *StatementResultAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementResultAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementResultAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementResultAllOf(val *StatementResultAllOf) *NullableStatementResultAllOf {
	return &NullableStatementResultAllOf{value: val, isSet: true}
}

func (v NullableStatementResultAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementResultAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


