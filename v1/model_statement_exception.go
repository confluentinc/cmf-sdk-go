/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatementException Represents an exception that occurred while executing a SQL Statement
type StatementException struct {
	// API version for spec
	ApiVersion string `json:"apiVersion"`
	// Kind of resource - set to resource type
	Kind string `json:"kind"`
	// Name of the StatementException
	Name string `json:"name"`
	// Message of the StatementException
	Message string `json:"message"`
	// Timestamp when the StatementException was created
	Timestamp string `json:"timestamp"`
}

// NewStatementException instantiates a new StatementException object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementException(apiVersion string, kind string, name string, message string, timestamp string) *StatementException {
	this := StatementException{}
	this.ApiVersion = apiVersion
	this.Kind = kind
	this.Name = name
	this.Message = message
	this.Timestamp = timestamp
	return &this
}

// NewStatementExceptionWithDefaults instantiates a new StatementException object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementExceptionWithDefaults() *StatementException {
	this := StatementException{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *StatementException) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *StatementException) GetApiVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *StatementException) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetKind returns the Kind field value
func (o *StatementException) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *StatementException) GetKindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *StatementException) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *StatementException) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StatementException) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StatementException) SetName(v string) {
	o.Name = v
}

// GetMessage returns the Message field value
func (o *StatementException) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *StatementException) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *StatementException) SetMessage(v string) {
	o.Message = v
}

// GetTimestamp returns the Timestamp field value
func (o *StatementException) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *StatementException) GetTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *StatementException) SetTimestamp(v string) {
	o.Timestamp = v
}

func (o StatementException) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableStatementException struct {
	value *StatementException
	isSet bool
}

func (v NullableStatementException) Get() *StatementException {
	return v.value
}

func (v *NullableStatementException) Set(val *StatementException) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementException) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementException(val *StatementException) *NullableStatementException {
	return &NullableStatementException{value: val, isSet: true}
}

func (v NullableStatementException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


