/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// EnvironmentSecretMappingSpec Spec for environment secret mapping
type EnvironmentSecretMappingSpec struct {
	// Name of the secret to be mapped to the connection secret id of this mapping.
	SecretName string `json:"secretName"`
}

// NewEnvironmentSecretMappingSpec instantiates a new EnvironmentSecretMappingSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentSecretMappingSpec(secretName string) *EnvironmentSecretMappingSpec {
	this := EnvironmentSecretMappingSpec{}
	this.SecretName = secretName
	return &this
}

// NewEnvironmentSecretMappingSpecWithDefaults instantiates a new EnvironmentSecretMappingSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentSecretMappingSpecWithDefaults() *EnvironmentSecretMappingSpec {
	this := EnvironmentSecretMappingSpec{}
	return &this
}

// GetSecretName returns the SecretName field value
func (o *EnvironmentSecretMappingSpec) GetSecretName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SecretName
}

// GetSecretNameOk returns a tuple with the SecretName field value
// and a boolean to check if the value has been set.
func (o *EnvironmentSecretMappingSpec) GetSecretNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SecretName, true
}

// SetSecretName sets field value
func (o *EnvironmentSecretMappingSpec) SetSecretName(v string) {
	o.SecretName = v
}

func (o EnvironmentSecretMappingSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["secretName"] = o.SecretName
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentSecretMappingSpec struct {
	value *EnvironmentSecretMappingSpec
	isSet bool
}

func (v NullableEnvironmentSecretMappingSpec) Get() *EnvironmentSecretMappingSpec {
	return v.value
}

func (v *NullableEnvironmentSecretMappingSpec) Set(val *EnvironmentSecretMappingSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentSecretMappingSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentSecretMappingSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentSecretMappingSpec(val *EnvironmentSecretMappingSpec) *NullableEnvironmentSecretMappingSpec {
	return &NullableEnvironmentSecretMappingSpec{value: val, isSet: true}
}

func (v NullableEnvironmentSecretMappingSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentSecretMappingSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


