/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ComputePoolsPageAllOf struct for ComputePoolsPageAllOf
type ComputePoolsPageAllOf struct {
	Metadata *ComputePoolPageMetadata `json:"metadata,omitempty"`
	Items *[]ComputePool `json:"items,omitempty"`
}

// NewComputePoolsPageAllOf instantiates a new ComputePoolsPageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputePoolsPageAllOf() *ComputePoolsPageAllOf {
	this := ComputePoolsPageAllOf{}
	return &this
}

// NewComputePoolsPageAllOfWithDefaults instantiates a new ComputePoolsPageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputePoolsPageAllOfWithDefaults() *ComputePoolsPageAllOf {
	this := ComputePoolsPageAllOf{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ComputePoolsPageAllOf) GetMetadata() ComputePoolPageMetadata {
	if o == nil || o.Metadata == nil {
		var ret ComputePoolPageMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePoolsPageAllOf) GetMetadataOk() (*ComputePoolPageMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ComputePoolsPageAllOf) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ComputePoolPageMetadata and assigns it to the Metadata field.
func (o *ComputePoolsPageAllOf) SetMetadata(v ComputePoolPageMetadata) {
	o.Metadata = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ComputePoolsPageAllOf) GetItems() []ComputePool {
	if o == nil || o.Items == nil {
		var ret []ComputePool
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePoolsPageAllOf) GetItemsOk() (*[]ComputePool, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ComputePoolsPageAllOf) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ComputePool and assigns it to the Items field.
func (o *ComputePoolsPageAllOf) SetItems(v []ComputePool) {
	o.Items = &v
}

func (o ComputePoolsPageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableComputePoolsPageAllOf struct {
	value *ComputePoolsPageAllOf
	isSet bool
}

func (v NullableComputePoolsPageAllOf) Get() *ComputePoolsPageAllOf {
	return v.value
}

func (v *NullableComputePoolsPageAllOf) Set(val *ComputePoolsPageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableComputePoolsPageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableComputePoolsPageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputePoolsPageAllOf(val *ComputePoolsPageAllOf) *NullableComputePoolsPageAllOf {
	return &NullableComputePoolsPageAllOf{value: val, isSet: true}
}

func (v NullableComputePoolsPageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputePoolsPageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


