/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FlinkApplicationInstanceAllOf struct for FlinkApplicationInstanceAllOf
type FlinkApplicationInstanceAllOf struct {
	Metadata *ApplicationInstanceMetadata `json:"metadata,omitempty"`
	Status *ApplicationInstanceStatus `json:"status,omitempty"`
}

// NewFlinkApplicationInstanceAllOf instantiates a new FlinkApplicationInstanceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlinkApplicationInstanceAllOf() *FlinkApplicationInstanceAllOf {
	this := FlinkApplicationInstanceAllOf{}
	return &this
}

// NewFlinkApplicationInstanceAllOfWithDefaults instantiates a new FlinkApplicationInstanceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlinkApplicationInstanceAllOfWithDefaults() *FlinkApplicationInstanceAllOf {
	this := FlinkApplicationInstanceAllOf{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *FlinkApplicationInstanceAllOf) GetMetadata() ApplicationInstanceMetadata {
	if o == nil || o.Metadata == nil {
		var ret ApplicationInstanceMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlinkApplicationInstanceAllOf) GetMetadataOk() (*ApplicationInstanceMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *FlinkApplicationInstanceAllOf) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ApplicationInstanceMetadata and assigns it to the Metadata field.
func (o *FlinkApplicationInstanceAllOf) SetMetadata(v ApplicationInstanceMetadata) {
	o.Metadata = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FlinkApplicationInstanceAllOf) GetStatus() ApplicationInstanceStatus {
	if o == nil || o.Status == nil {
		var ret ApplicationInstanceStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlinkApplicationInstanceAllOf) GetStatusOk() (*ApplicationInstanceStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FlinkApplicationInstanceAllOf) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ApplicationInstanceStatus and assigns it to the Status field.
func (o *FlinkApplicationInstanceAllOf) SetStatus(v ApplicationInstanceStatus) {
	o.Status = &v
}

func (o FlinkApplicationInstanceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableFlinkApplicationInstanceAllOf struct {
	value *FlinkApplicationInstanceAllOf
	isSet bool
}

func (v NullableFlinkApplicationInstanceAllOf) Get() *FlinkApplicationInstanceAllOf {
	return v.value
}

func (v *NullableFlinkApplicationInstanceAllOf) Set(val *FlinkApplicationInstanceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableFlinkApplicationInstanceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableFlinkApplicationInstanceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlinkApplicationInstanceAllOf(val *FlinkApplicationInstanceAllOf) *NullableFlinkApplicationInstanceAllOf {
	return &NullableFlinkApplicationInstanceAllOf{value: val, isSet: true}
}

func (v NullableFlinkApplicationInstanceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlinkApplicationInstanceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


