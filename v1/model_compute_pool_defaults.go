/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ComputePoolDefaults struct for ComputePoolDefaults
type ComputePoolDefaults struct {
	// the defaults as YAML or JSON for ComputePools
	ComputePoolDefaults *map[string]interface{} `json:"computePoolDefaults,omitempty"`
}

// NewComputePoolDefaults instantiates a new ComputePoolDefaults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputePoolDefaults() *ComputePoolDefaults {
	this := ComputePoolDefaults{}
	return &this
}

// NewComputePoolDefaultsWithDefaults instantiates a new ComputePoolDefaults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputePoolDefaultsWithDefaults() *ComputePoolDefaults {
	this := ComputePoolDefaults{}
	return &this
}

// GetComputePoolDefaults returns the ComputePoolDefaults field value if set, zero value otherwise.
func (o *ComputePoolDefaults) GetComputePoolDefaults() map[string]interface{} {
	if o == nil || o.ComputePoolDefaults == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ComputePoolDefaults
}

// GetComputePoolDefaultsOk returns a tuple with the ComputePoolDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePoolDefaults) GetComputePoolDefaultsOk() (*map[string]interface{}, bool) {
	if o == nil || o.ComputePoolDefaults == nil {
		return nil, false
	}
	return o.ComputePoolDefaults, true
}

// HasComputePoolDefaults returns a boolean if a field has been set.
func (o *ComputePoolDefaults) HasComputePoolDefaults() bool {
	if o != nil && o.ComputePoolDefaults != nil {
		return true
	}

	return false
}

// SetComputePoolDefaults gets a reference to the given map[string]interface{} and assigns it to the ComputePoolDefaults field.
func (o *ComputePoolDefaults) SetComputePoolDefaults(v map[string]interface{}) {
	o.ComputePoolDefaults = &v
}

func (o ComputePoolDefaults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ComputePoolDefaults != nil {
		toSerialize["computePoolDefaults"] = o.ComputePoolDefaults
	}
	return json.Marshal(toSerialize)
}

type NullableComputePoolDefaults struct {
	value *ComputePoolDefaults
	isSet bool
}

func (v NullableComputePoolDefaults) Get() *ComputePoolDefaults {
	return v.value
}

func (v *NullableComputePoolDefaults) Set(val *ComputePoolDefaults) {
	v.value = val
	v.isSet = true
}

func (v NullableComputePoolDefaults) IsSet() bool {
	return v.isSet
}

func (v *NullableComputePoolDefaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputePoolDefaults(val *ComputePoolDefaults) *NullableComputePoolDefaults {
	return &NullableComputePoolDefaults{value: val, isSet: true}
}

func (v NullableComputePoolDefaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputePoolDefaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


