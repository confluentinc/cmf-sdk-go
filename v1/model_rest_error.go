/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// RestError The schema for all error responses.
type RestError struct {
	// List of all errors
	Errors *[]ModelError `json:"errors,omitempty"`
}

// NewRestError instantiates a new RestError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestError() *RestError {
	this := RestError{}
	return &this
}

// NewRestErrorWithDefaults instantiates a new RestError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestErrorWithDefaults() *RestError {
	this := RestError{}
	return &this
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *RestError) GetErrors() []ModelError {
	if o == nil || o.Errors == nil {
		var ret []ModelError
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestError) GetErrorsOk() (*[]ModelError, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *RestError) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ModelError and assigns it to the Errors field.
func (o *RestError) SetErrors(v []ModelError) {
	o.Errors = &v
}

func (o RestError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableRestError struct {
	value *RestError
	isSet bool
}

func (v NullableRestError) Get() *RestError {
	return v.value
}

func (v *NullableRestError) Set(val *RestError) {
	v.value = val
	v.isSet = true
}

func (v NullableRestError) IsSet() bool {
	return v.isSet
}

func (v *NullableRestError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestError(val *RestError) *NullableRestError {
	return &NullableRestError{value: val, isSet: true}
}

func (v NullableRestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


