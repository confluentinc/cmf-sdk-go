/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ResultSchema Represents the schema of the result of a SQL Statement
type ResultSchema struct {
	// Properites of all columns in the schema
	Columns []ResultSchemaColumn `json:"columns"`
}

// NewResultSchema instantiates a new ResultSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultSchema(columns []ResultSchemaColumn) *ResultSchema {
	this := ResultSchema{}
	this.Columns = columns
	return &this
}

// NewResultSchemaWithDefaults instantiates a new ResultSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultSchemaWithDefaults() *ResultSchema {
	this := ResultSchema{}
	return &this
}

// GetColumns returns the Columns field value
func (o *ResultSchema) GetColumns() []ResultSchemaColumn {
	if o == nil {
		var ret []ResultSchemaColumn
		return ret
	}

	return o.Columns
}

// GetColumnsOk returns a tuple with the Columns field value
// and a boolean to check if the value has been set.
func (o *ResultSchema) GetColumnsOk() (*[]ResultSchemaColumn, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Columns, true
}

// SetColumns sets field value
func (o *ResultSchema) SetColumns(v []ResultSchemaColumn) {
	o.Columns = v
}

func (o ResultSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["columns"] = o.Columns
	}
	return json.Marshal(toSerialize)
}

type NullableResultSchema struct {
	value *ResultSchema
	isSet bool
}

func (v NullableResultSchema) Get() *ResultSchema {
	return v.value
}

func (v *NullableResultSchema) Set(val *ResultSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableResultSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableResultSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultSchema(val *ResultSchema) *NullableResultSchema {
	return &NullableResultSchema{value: val, isSet: true}
}

func (v NullableResultSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


