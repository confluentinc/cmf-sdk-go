/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatementExceptionList Represents a list of exceptions that occurred while executing a SQL Statement
type StatementExceptionList struct {
	// API version for spec
	ApiVersion string `json:"apiVersion"`
	// Kind of resource - set to resource type
	Kind string `json:"kind"`
	// List of exceptions
	Data []StatementException `json:"data"`
}

// NewStatementExceptionList instantiates a new StatementExceptionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementExceptionList(apiVersion string, kind string, data []StatementException) *StatementExceptionList {
	this := StatementExceptionList{}
	this.ApiVersion = apiVersion
	this.Kind = kind
	this.Data = data
	return &this
}

// NewStatementExceptionListWithDefaults instantiates a new StatementExceptionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementExceptionListWithDefaults() *StatementExceptionList {
	this := StatementExceptionList{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *StatementExceptionList) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *StatementExceptionList) GetApiVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *StatementExceptionList) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetKind returns the Kind field value
func (o *StatementExceptionList) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *StatementExceptionList) GetKindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *StatementExceptionList) SetKind(v string) {
	o.Kind = v
}

// GetData returns the Data field value
func (o *StatementExceptionList) GetData() []StatementException {
	if o == nil {
		var ret []StatementException
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *StatementExceptionList) GetDataOk() (*[]StatementException, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *StatementExceptionList) SetData(v []StatementException) {
	o.Data = v
}

func (o StatementExceptionList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableStatementExceptionList struct {
	value *StatementExceptionList
	isSet bool
}

func (v NullableStatementExceptionList) Get() *StatementExceptionList {
	return v.value
}

func (v *NullableStatementExceptionList) Set(val *StatementExceptionList) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementExceptionList) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementExceptionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementExceptionList(val *StatementExceptionList) *NullableStatementExceptionList {
	return &NullableStatementExceptionList{value: val, isSet: true}
}

func (v NullableStatementExceptionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementExceptionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


