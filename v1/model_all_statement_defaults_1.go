/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// AllStatementDefaults1 the defaults for detached and interactive Statements
type AllStatementDefaults1 struct {
	Detached *StatementDefaults `json:"detached,omitempty"`
	Interactive *StatementDefaults `json:"interactive,omitempty"`
}

// NewAllStatementDefaults1 instantiates a new AllStatementDefaults1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllStatementDefaults1() *AllStatementDefaults1 {
	this := AllStatementDefaults1{}
	return &this
}

// NewAllStatementDefaults1WithDefaults instantiates a new AllStatementDefaults1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllStatementDefaults1WithDefaults() *AllStatementDefaults1 {
	this := AllStatementDefaults1{}
	return &this
}

// GetDetached returns the Detached field value if set, zero value otherwise.
func (o *AllStatementDefaults1) GetDetached() StatementDefaults {
	if o == nil || o.Detached == nil {
		var ret StatementDefaults
		return ret
	}
	return *o.Detached
}

// GetDetachedOk returns a tuple with the Detached field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllStatementDefaults1) GetDetachedOk() (*StatementDefaults, bool) {
	if o == nil || o.Detached == nil {
		return nil, false
	}
	return o.Detached, true
}

// HasDetached returns a boolean if a field has been set.
func (o *AllStatementDefaults1) HasDetached() bool {
	if o != nil && o.Detached != nil {
		return true
	}

	return false
}

// SetDetached gets a reference to the given StatementDefaults and assigns it to the Detached field.
func (o *AllStatementDefaults1) SetDetached(v StatementDefaults) {
	o.Detached = &v
}

// GetInteractive returns the Interactive field value if set, zero value otherwise.
func (o *AllStatementDefaults1) GetInteractive() StatementDefaults {
	if o == nil || o.Interactive == nil {
		var ret StatementDefaults
		return ret
	}
	return *o.Interactive
}

// GetInteractiveOk returns a tuple with the Interactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllStatementDefaults1) GetInteractiveOk() (*StatementDefaults, bool) {
	if o == nil || o.Interactive == nil {
		return nil, false
	}
	return o.Interactive, true
}

// HasInteractive returns a boolean if a field has been set.
func (o *AllStatementDefaults1) HasInteractive() bool {
	if o != nil && o.Interactive != nil {
		return true
	}

	return false
}

// SetInteractive gets a reference to the given StatementDefaults and assigns it to the Interactive field.
func (o *AllStatementDefaults1) SetInteractive(v StatementDefaults) {
	o.Interactive = &v
}

func (o AllStatementDefaults1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Detached != nil {
		toSerialize["detached"] = o.Detached
	}
	if o.Interactive != nil {
		toSerialize["interactive"] = o.Interactive
	}
	return json.Marshal(toSerialize)
}

type NullableAllStatementDefaults1 struct {
	value *AllStatementDefaults1
	isSet bool
}

func (v NullableAllStatementDefaults1) Get() *AllStatementDefaults1 {
	return v.value
}

func (v *NullableAllStatementDefaults1) Set(val *AllStatementDefaults1) {
	v.value = val
	v.isSet = true
}

func (v NullableAllStatementDefaults1) IsSet() bool {
	return v.isSet
}

func (v *NullableAllStatementDefaults1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllStatementDefaults1(val *AllStatementDefaults1) *NullableAllStatementDefaults1 {
	return &NullableAllStatementDefaults1{value: val, isSet: true}
}

func (v NullableAllStatementDefaults1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllStatementDefaults1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


