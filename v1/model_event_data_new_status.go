/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// EventDataNewStatus struct for EventDataNewStatus
type EventDataNewStatus struct {
	// The new status
	NewStatus *string `json:"newStatus,omitempty"`
}

// NewEventDataNewStatus instantiates a new EventDataNewStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDataNewStatus() *EventDataNewStatus {
	this := EventDataNewStatus{}
	return &this
}

// NewEventDataNewStatusWithDefaults instantiates a new EventDataNewStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDataNewStatusWithDefaults() *EventDataNewStatus {
	this := EventDataNewStatus{}
	return &this
}

// GetNewStatus returns the NewStatus field value if set, zero value otherwise.
func (o *EventDataNewStatus) GetNewStatus() string {
	if o == nil || o.NewStatus == nil {
		var ret string
		return ret
	}
	return *o.NewStatus
}

// GetNewStatusOk returns a tuple with the NewStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataNewStatus) GetNewStatusOk() (*string, bool) {
	if o == nil || o.NewStatus == nil {
		return nil, false
	}
	return o.NewStatus, true
}

// HasNewStatus returns a boolean if a field has been set.
func (o *EventDataNewStatus) HasNewStatus() bool {
	if o != nil && o.NewStatus != nil {
		return true
	}

	return false
}

// SetNewStatus gets a reference to the given string and assigns it to the NewStatus field.
func (o *EventDataNewStatus) SetNewStatus(v string) {
	o.NewStatus = &v
}

func (o EventDataNewStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NewStatus != nil {
		toSerialize["newStatus"] = o.NewStatus
	}
	return json.Marshal(toSerialize)
}

type NullableEventDataNewStatus struct {
	value *EventDataNewStatus
	isSet bool
}

func (v NullableEventDataNewStatus) Get() *EventDataNewStatus {
	return v.value
}

func (v *NullableEventDataNewStatus) Set(val *EventDataNewStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDataNewStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDataNewStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDataNewStatus(val *EventDataNewStatus) *NullableEventDataNewStatus {
	return &NullableEventDataNewStatus{value: val, isSet: true}
}

func (v NullableEventDataNewStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDataNewStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


