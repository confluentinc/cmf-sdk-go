/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// PostResourceBase struct for PostResourceBase
type PostResourceBase struct {
	// A unique name for the resource.
	Name *string `json:"name,omitempty"`
}

// NewPostResourceBase instantiates a new PostResourceBase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostResourceBase() *PostResourceBase {
	this := PostResourceBase{}
	return &this
}

// NewPostResourceBaseWithDefaults instantiates a new PostResourceBase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostResourceBaseWithDefaults() *PostResourceBase {
	this := PostResourceBase{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PostResourceBase) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostResourceBase) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PostResourceBase) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PostResourceBase) SetName(v string) {
	o.Name = &v
}

func (o PostResourceBase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullablePostResourceBase struct {
	value *PostResourceBase
	isSet bool
}

func (v NullablePostResourceBase) Get() *PostResourceBase {
	return v.value
}

func (v *NullablePostResourceBase) Set(val *PostResourceBase) {
	v.value = val
	v.isSet = true
}

func (v NullablePostResourceBase) IsSet() bool {
	return v.isSet
}

func (v *NullablePostResourceBase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostResourceBase(val *PostResourceBase) *NullablePostResourceBase {
	return &NullablePostResourceBase{value: val, isSet: true}
}

func (v NullablePostResourceBase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostResourceBase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


