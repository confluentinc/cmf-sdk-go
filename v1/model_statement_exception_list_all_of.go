/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatementExceptionListAllOf struct for StatementExceptionListAllOf
type StatementExceptionListAllOf struct {
	// List of exceptions
	Data []StatementException `json:"data"`
}

// NewStatementExceptionListAllOf instantiates a new StatementExceptionListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementExceptionListAllOf(data []StatementException) *StatementExceptionListAllOf {
	this := StatementExceptionListAllOf{}
	this.Data = data
	return &this
}

// NewStatementExceptionListAllOfWithDefaults instantiates a new StatementExceptionListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementExceptionListAllOfWithDefaults() *StatementExceptionListAllOf {
	this := StatementExceptionListAllOf{}
	return &this
}

// GetData returns the Data field value
func (o *StatementExceptionListAllOf) GetData() []StatementException {
	if o == nil {
		var ret []StatementException
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *StatementExceptionListAllOf) GetDataOk() (*[]StatementException, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *StatementExceptionListAllOf) SetData(v []StatementException) {
	o.Data = v
}

func (o StatementExceptionListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableStatementExceptionListAllOf struct {
	value *StatementExceptionListAllOf
	isSet bool
}

func (v NullableStatementExceptionListAllOf) Get() *StatementExceptionListAllOf {
	return v.value
}

func (v *NullableStatementExceptionListAllOf) Set(val *StatementExceptionListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementExceptionListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementExceptionListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementExceptionListAllOf(val *StatementExceptionListAllOf) *NullableStatementExceptionListAllOf {
	return &NullableStatementExceptionListAllOf{value: val, isSet: true}
}

func (v NullableStatementExceptionListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementExceptionListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


