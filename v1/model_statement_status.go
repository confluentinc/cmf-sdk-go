/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatementStatus Status for statement
type StatementStatus struct {
	// The lifecycle phase of the statement
	Phase string `json:"phase"`
	// Details about the execution status of the statement
	Detail *string `json:"detail,omitempty"`
	Traits *StatementTraits `json:"traits,omitempty"`
}

// NewStatementStatus instantiates a new StatementStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementStatus(phase string) *StatementStatus {
	this := StatementStatus{}
	this.Phase = phase
	return &this
}

// NewStatementStatusWithDefaults instantiates a new StatementStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementStatusWithDefaults() *StatementStatus {
	this := StatementStatus{}
	return &this
}

// GetPhase returns the Phase field value
func (o *StatementStatus) GetPhase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
func (o *StatementStatus) GetPhaseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Phase, true
}

// SetPhase sets field value
func (o *StatementStatus) SetPhase(v string) {
	o.Phase = v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *StatementStatus) GetDetail() string {
	if o == nil || o.Detail == nil {
		var ret string
		return ret
	}
	return *o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementStatus) GetDetailOk() (*string, bool) {
	if o == nil || o.Detail == nil {
		return nil, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *StatementStatus) HasDetail() bool {
	if o != nil && o.Detail != nil {
		return true
	}

	return false
}

// SetDetail gets a reference to the given string and assigns it to the Detail field.
func (o *StatementStatus) SetDetail(v string) {
	o.Detail = &v
}

// GetTraits returns the Traits field value if set, zero value otherwise.
func (o *StatementStatus) GetTraits() StatementTraits {
	if o == nil || o.Traits == nil {
		var ret StatementTraits
		return ret
	}
	return *o.Traits
}

// GetTraitsOk returns a tuple with the Traits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementStatus) GetTraitsOk() (*StatementTraits, bool) {
	if o == nil || o.Traits == nil {
		return nil, false
	}
	return o.Traits, true
}

// HasTraits returns a boolean if a field has been set.
func (o *StatementStatus) HasTraits() bool {
	if o != nil && o.Traits != nil {
		return true
	}

	return false
}

// SetTraits gets a reference to the given StatementTraits and assigns it to the Traits field.
func (o *StatementStatus) SetTraits(v StatementTraits) {
	o.Traits = &v
}

func (o StatementStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["phase"] = o.Phase
	}
	if o.Detail != nil {
		toSerialize["detail"] = o.Detail
	}
	if o.Traits != nil {
		toSerialize["traits"] = o.Traits
	}
	return json.Marshal(toSerialize)
}

type NullableStatementStatus struct {
	value *StatementStatus
	isSet bool
}

func (v NullableStatementStatus) Get() *StatementStatus {
	return v.value
}

func (v *NullableStatementStatus) Set(val *StatementStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementStatus(val *StatementStatus) *NullableStatementStatus {
	return &NullableStatementStatus{value: val, isSet: true}
}

func (v NullableStatementStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


