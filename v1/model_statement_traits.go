/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatementTraits Detailed information about the properties of the statement
type StatementTraits struct {
	// The kind of SQL statement
	SqlKind *string `json:"sqlKind,omitempty"`
	// Whether the result of the statement is bounded
	IsBounded *bool `json:"isBounded,omitempty"`
	// Whether the result of the statement is append only
	IsAppendOnly *bool `json:"isAppendOnly,omitempty"`
	// The column indexes that are updated by the statement
	UpsertColumns *[]int32 `json:"upsertColumns,omitempty"`
	Schema *ResultSchema `json:"schema,omitempty"`
}

// NewStatementTraits instantiates a new StatementTraits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementTraits() *StatementTraits {
	this := StatementTraits{}
	return &this
}

// NewStatementTraitsWithDefaults instantiates a new StatementTraits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementTraitsWithDefaults() *StatementTraits {
	this := StatementTraits{}
	return &this
}

// GetSqlKind returns the SqlKind field value if set, zero value otherwise.
func (o *StatementTraits) GetSqlKind() string {
	if o == nil || o.SqlKind == nil {
		var ret string
		return ret
	}
	return *o.SqlKind
}

// GetSqlKindOk returns a tuple with the SqlKind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementTraits) GetSqlKindOk() (*string, bool) {
	if o == nil || o.SqlKind == nil {
		return nil, false
	}
	return o.SqlKind, true
}

// HasSqlKind returns a boolean if a field has been set.
func (o *StatementTraits) HasSqlKind() bool {
	if o != nil && o.SqlKind != nil {
		return true
	}

	return false
}

// SetSqlKind gets a reference to the given string and assigns it to the SqlKind field.
func (o *StatementTraits) SetSqlKind(v string) {
	o.SqlKind = &v
}

// GetIsBounded returns the IsBounded field value if set, zero value otherwise.
func (o *StatementTraits) GetIsBounded() bool {
	if o == nil || o.IsBounded == nil {
		var ret bool
		return ret
	}
	return *o.IsBounded
}

// GetIsBoundedOk returns a tuple with the IsBounded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementTraits) GetIsBoundedOk() (*bool, bool) {
	if o == nil || o.IsBounded == nil {
		return nil, false
	}
	return o.IsBounded, true
}

// HasIsBounded returns a boolean if a field has been set.
func (o *StatementTraits) HasIsBounded() bool {
	if o != nil && o.IsBounded != nil {
		return true
	}

	return false
}

// SetIsBounded gets a reference to the given bool and assigns it to the IsBounded field.
func (o *StatementTraits) SetIsBounded(v bool) {
	o.IsBounded = &v
}

// GetIsAppendOnly returns the IsAppendOnly field value if set, zero value otherwise.
func (o *StatementTraits) GetIsAppendOnly() bool {
	if o == nil || o.IsAppendOnly == nil {
		var ret bool
		return ret
	}
	return *o.IsAppendOnly
}

// GetIsAppendOnlyOk returns a tuple with the IsAppendOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementTraits) GetIsAppendOnlyOk() (*bool, bool) {
	if o == nil || o.IsAppendOnly == nil {
		return nil, false
	}
	return o.IsAppendOnly, true
}

// HasIsAppendOnly returns a boolean if a field has been set.
func (o *StatementTraits) HasIsAppendOnly() bool {
	if o != nil && o.IsAppendOnly != nil {
		return true
	}

	return false
}

// SetIsAppendOnly gets a reference to the given bool and assigns it to the IsAppendOnly field.
func (o *StatementTraits) SetIsAppendOnly(v bool) {
	o.IsAppendOnly = &v
}

// GetUpsertColumns returns the UpsertColumns field value if set, zero value otherwise.
func (o *StatementTraits) GetUpsertColumns() []int32 {
	if o == nil || o.UpsertColumns == nil {
		var ret []int32
		return ret
	}
	return *o.UpsertColumns
}

// GetUpsertColumnsOk returns a tuple with the UpsertColumns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementTraits) GetUpsertColumnsOk() (*[]int32, bool) {
	if o == nil || o.UpsertColumns == nil {
		return nil, false
	}
	return o.UpsertColumns, true
}

// HasUpsertColumns returns a boolean if a field has been set.
func (o *StatementTraits) HasUpsertColumns() bool {
	if o != nil && o.UpsertColumns != nil {
		return true
	}

	return false
}

// SetUpsertColumns gets a reference to the given []int32 and assigns it to the UpsertColumns field.
func (o *StatementTraits) SetUpsertColumns(v []int32) {
	o.UpsertColumns = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *StatementTraits) GetSchema() ResultSchema {
	if o == nil || o.Schema == nil {
		var ret ResultSchema
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementTraits) GetSchemaOk() (*ResultSchema, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *StatementTraits) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given ResultSchema and assigns it to the Schema field.
func (o *StatementTraits) SetSchema(v ResultSchema) {
	o.Schema = &v
}

func (o StatementTraits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SqlKind != nil {
		toSerialize["sqlKind"] = o.SqlKind
	}
	if o.IsBounded != nil {
		toSerialize["isBounded"] = o.IsBounded
	}
	if o.IsAppendOnly != nil {
		toSerialize["isAppendOnly"] = o.IsAppendOnly
	}
	if o.UpsertColumns != nil {
		toSerialize["upsertColumns"] = o.UpsertColumns
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	return json.Marshal(toSerialize)
}

type NullableStatementTraits struct {
	value *StatementTraits
	isSet bool
}

func (v NullableStatementTraits) Get() *StatementTraits {
	return v.value
}

func (v *NullableStatementTraits) Set(val *StatementTraits) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementTraits) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementTraits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementTraits(val *StatementTraits) *NullableStatementTraits {
	return &NullableStatementTraits{value: val, isSet: true}
}

func (v NullableStatementTraits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementTraits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


