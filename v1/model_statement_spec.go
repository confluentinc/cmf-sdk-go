/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatementSpec Spec for statement
type StatementSpec struct {
	// SQL statement
	Statement string `json:"statement"`
	// Properties of the client session
	Properties *map[string]string `json:"properties,omitempty"`
	// Flink configuration for the statement
	FlinkConfiguration *map[string]string `json:"flinkConfiguration,omitempty"`
	// Name of the ComputePool
	ComputePoolName string `json:"computePoolName"`
	// Parallelism of the statement
	Parallelism *int32 `json:"parallelism,omitempty"`
	// Whether the statement is stopped
	Stopped *bool `json:"stopped,omitempty"`
}

// NewStatementSpec instantiates a new StatementSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementSpec(statement string, computePoolName string) *StatementSpec {
	this := StatementSpec{}
	this.Statement = statement
	this.ComputePoolName = computePoolName
	return &this
}

// NewStatementSpecWithDefaults instantiates a new StatementSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementSpecWithDefaults() *StatementSpec {
	this := StatementSpec{}
	return &this
}

// GetStatement returns the Statement field value
func (o *StatementSpec) GetStatement() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Statement
}

// GetStatementOk returns a tuple with the Statement field value
// and a boolean to check if the value has been set.
func (o *StatementSpec) GetStatementOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Statement, true
}

// SetStatement sets field value
func (o *StatementSpec) SetStatement(v string) {
	o.Statement = v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *StatementSpec) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementSpec) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *StatementSpec) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *StatementSpec) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetFlinkConfiguration returns the FlinkConfiguration field value if set, zero value otherwise.
func (o *StatementSpec) GetFlinkConfiguration() map[string]string {
	if o == nil || o.FlinkConfiguration == nil {
		var ret map[string]string
		return ret
	}
	return *o.FlinkConfiguration
}

// GetFlinkConfigurationOk returns a tuple with the FlinkConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementSpec) GetFlinkConfigurationOk() (*map[string]string, bool) {
	if o == nil || o.FlinkConfiguration == nil {
		return nil, false
	}
	return o.FlinkConfiguration, true
}

// HasFlinkConfiguration returns a boolean if a field has been set.
func (o *StatementSpec) HasFlinkConfiguration() bool {
	if o != nil && o.FlinkConfiguration != nil {
		return true
	}

	return false
}

// SetFlinkConfiguration gets a reference to the given map[string]string and assigns it to the FlinkConfiguration field.
func (o *StatementSpec) SetFlinkConfiguration(v map[string]string) {
	o.FlinkConfiguration = &v
}

// GetComputePoolName returns the ComputePoolName field value
func (o *StatementSpec) GetComputePoolName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComputePoolName
}

// GetComputePoolNameOk returns a tuple with the ComputePoolName field value
// and a boolean to check if the value has been set.
func (o *StatementSpec) GetComputePoolNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ComputePoolName, true
}

// SetComputePoolName sets field value
func (o *StatementSpec) SetComputePoolName(v string) {
	o.ComputePoolName = v
}

// GetParallelism returns the Parallelism field value if set, zero value otherwise.
func (o *StatementSpec) GetParallelism() int32 {
	if o == nil || o.Parallelism == nil {
		var ret int32
		return ret
	}
	return *o.Parallelism
}

// GetParallelismOk returns a tuple with the Parallelism field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementSpec) GetParallelismOk() (*int32, bool) {
	if o == nil || o.Parallelism == nil {
		return nil, false
	}
	return o.Parallelism, true
}

// HasParallelism returns a boolean if a field has been set.
func (o *StatementSpec) HasParallelism() bool {
	if o != nil && o.Parallelism != nil {
		return true
	}

	return false
}

// SetParallelism gets a reference to the given int32 and assigns it to the Parallelism field.
func (o *StatementSpec) SetParallelism(v int32) {
	o.Parallelism = &v
}

// GetStopped returns the Stopped field value if set, zero value otherwise.
func (o *StatementSpec) GetStopped() bool {
	if o == nil || o.Stopped == nil {
		var ret bool
		return ret
	}
	return *o.Stopped
}

// GetStoppedOk returns a tuple with the Stopped field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementSpec) GetStoppedOk() (*bool, bool) {
	if o == nil || o.Stopped == nil {
		return nil, false
	}
	return o.Stopped, true
}

// HasStopped returns a boolean if a field has been set.
func (o *StatementSpec) HasStopped() bool {
	if o != nil && o.Stopped != nil {
		return true
	}

	return false
}

// SetStopped gets a reference to the given bool and assigns it to the Stopped field.
func (o *StatementSpec) SetStopped(v bool) {
	o.Stopped = &v
}

func (o StatementSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["statement"] = o.Statement
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.FlinkConfiguration != nil {
		toSerialize["flinkConfiguration"] = o.FlinkConfiguration
	}
	if true {
		toSerialize["computePoolName"] = o.ComputePoolName
	}
	if o.Parallelism != nil {
		toSerialize["parallelism"] = o.Parallelism
	}
	if o.Stopped != nil {
		toSerialize["stopped"] = o.Stopped
	}
	return json.Marshal(toSerialize)
}

type NullableStatementSpec struct {
	value *StatementSpec
	isSet bool
}

func (v NullableStatementSpec) Get() *StatementSpec {
	return v.value
}

func (v *NullableStatementSpec) Set(val *StatementSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementSpec(val *StatementSpec) *NullableStatementSpec {
	return &NullableStatementSpec{value: val, isSet: true}
}

func (v NullableStatementSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


