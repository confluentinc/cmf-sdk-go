/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatementDefaults struct for StatementDefaults
type StatementDefaults struct {
	// default Flink configuration for Statements
	FlinkConfiguration *map[string]string `json:"flinkConfiguration,omitempty"`
}

// NewStatementDefaults instantiates a new StatementDefaults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementDefaults() *StatementDefaults {
	this := StatementDefaults{}
	return &this
}

// NewStatementDefaultsWithDefaults instantiates a new StatementDefaults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementDefaultsWithDefaults() *StatementDefaults {
	this := StatementDefaults{}
	return &this
}

// GetFlinkConfiguration returns the FlinkConfiguration field value if set, zero value otherwise.
func (o *StatementDefaults) GetFlinkConfiguration() map[string]string {
	if o == nil || o.FlinkConfiguration == nil {
		var ret map[string]string
		return ret
	}
	return *o.FlinkConfiguration
}

// GetFlinkConfigurationOk returns a tuple with the FlinkConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementDefaults) GetFlinkConfigurationOk() (*map[string]string, bool) {
	if o == nil || o.FlinkConfiguration == nil {
		return nil, false
	}
	return o.FlinkConfiguration, true
}

// HasFlinkConfiguration returns a boolean if a field has been set.
func (o *StatementDefaults) HasFlinkConfiguration() bool {
	if o != nil && o.FlinkConfiguration != nil {
		return true
	}

	return false
}

// SetFlinkConfiguration gets a reference to the given map[string]string and assigns it to the FlinkConfiguration field.
func (o *StatementDefaults) SetFlinkConfiguration(v map[string]string) {
	o.FlinkConfiguration = &v
}

func (o StatementDefaults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlinkConfiguration != nil {
		toSerialize["flinkConfiguration"] = o.FlinkConfiguration
	}
	return json.Marshal(toSerialize)
}

type NullableStatementDefaults struct {
	value *StatementDefaults
	isSet bool
}

func (v NullableStatementDefaults) Get() *StatementDefaults {
	return v.value
}

func (v *NullableStatementDefaults) Set(val *StatementDefaults) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementDefaults) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementDefaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementDefaults(val *StatementDefaults) *NullableStatementDefaults {
	return &NullableStatementDefaults{value: val, isSet: true}
}

func (v NullableStatementDefaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementDefaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


