/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// KafkaCatalogSpec Spec of a Kafka Catalog
type KafkaCatalogSpec struct {
	SrInstance KafkaCatalogSpecSrInstance `json:"srInstance"`
	KafkaClusters []KafkaCatalogSpecKafkaClusters `json:"kafkaClusters"`
}

// NewKafkaCatalogSpec instantiates a new KafkaCatalogSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaCatalogSpec(srInstance KafkaCatalogSpecSrInstance, kafkaClusters []KafkaCatalogSpecKafkaClusters) *KafkaCatalogSpec {
	this := KafkaCatalogSpec{}
	this.SrInstance = srInstance
	this.KafkaClusters = kafkaClusters
	return &this
}

// NewKafkaCatalogSpecWithDefaults instantiates a new KafkaCatalogSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaCatalogSpecWithDefaults() *KafkaCatalogSpec {
	this := KafkaCatalogSpec{}
	return &this
}

// GetSrInstance returns the SrInstance field value
func (o *KafkaCatalogSpec) GetSrInstance() KafkaCatalogSpecSrInstance {
	if o == nil {
		var ret KafkaCatalogSpecSrInstance
		return ret
	}

	return o.SrInstance
}

// GetSrInstanceOk returns a tuple with the SrInstance field value
// and a boolean to check if the value has been set.
func (o *KafkaCatalogSpec) GetSrInstanceOk() (*KafkaCatalogSpecSrInstance, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SrInstance, true
}

// SetSrInstance sets field value
func (o *KafkaCatalogSpec) SetSrInstance(v KafkaCatalogSpecSrInstance) {
	o.SrInstance = v
}

// GetKafkaClusters returns the KafkaClusters field value
func (o *KafkaCatalogSpec) GetKafkaClusters() []KafkaCatalogSpecKafkaClusters {
	if o == nil {
		var ret []KafkaCatalogSpecKafkaClusters
		return ret
	}

	return o.KafkaClusters
}

// GetKafkaClustersOk returns a tuple with the KafkaClusters field value
// and a boolean to check if the value has been set.
func (o *KafkaCatalogSpec) GetKafkaClustersOk() (*[]KafkaCatalogSpecKafkaClusters, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KafkaClusters, true
}

// SetKafkaClusters sets field value
func (o *KafkaCatalogSpec) SetKafkaClusters(v []KafkaCatalogSpecKafkaClusters) {
	o.KafkaClusters = v
}

func (o KafkaCatalogSpec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["srInstance"] = o.SrInstance
	}
	if true {
		toSerialize["kafkaClusters"] = o.KafkaClusters
	}
	return json.Marshal(toSerialize)
}

type NullableKafkaCatalogSpec struct {
	value *KafkaCatalogSpec
	isSet bool
}

func (v NullableKafkaCatalogSpec) Get() *KafkaCatalogSpec {
	return v.value
}

func (v *NullableKafkaCatalogSpec) Set(val *KafkaCatalogSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaCatalogSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaCatalogSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaCatalogSpec(val *KafkaCatalogSpec) *NullableKafkaCatalogSpec {
	return &NullableKafkaCatalogSpec{value: val, isSet: true}
}

func (v NullableKafkaCatalogSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaCatalogSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


