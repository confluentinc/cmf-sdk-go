/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// EventsPageAllOf struct for EventsPageAllOf
type EventsPageAllOf struct {
	Metadata *EventsPageMetadata `json:"metadata,omitempty"`
	Items *[]FlinkApplicationEvent `json:"items,omitempty"`
}

// NewEventsPageAllOf instantiates a new EventsPageAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsPageAllOf() *EventsPageAllOf {
	this := EventsPageAllOf{}
	return &this
}

// NewEventsPageAllOfWithDefaults instantiates a new EventsPageAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsPageAllOfWithDefaults() *EventsPageAllOf {
	this := EventsPageAllOf{}
	return &this
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *EventsPageAllOf) GetMetadata() EventsPageMetadata {
	if o == nil || o.Metadata == nil {
		var ret EventsPageMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsPageAllOf) GetMetadataOk() (*EventsPageMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EventsPageAllOf) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given EventsPageMetadata and assigns it to the Metadata field.
func (o *EventsPageAllOf) SetMetadata(v EventsPageMetadata) {
	o.Metadata = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *EventsPageAllOf) GetItems() []FlinkApplicationEvent {
	if o == nil || o.Items == nil {
		var ret []FlinkApplicationEvent
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsPageAllOf) GetItemsOk() (*[]FlinkApplicationEvent, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *EventsPageAllOf) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []FlinkApplicationEvent and assigns it to the Items field.
func (o *EventsPageAllOf) SetItems(v []FlinkApplicationEvent) {
	o.Items = &v
}

func (o EventsPageAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableEventsPageAllOf struct {
	value *EventsPageAllOf
	isSet bool
}

func (v NullableEventsPageAllOf) Get() *EventsPageAllOf {
	return v.value
}

func (v *NullableEventsPageAllOf) Set(val *EventsPageAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsPageAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsPageAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsPageAllOf(val *EventsPageAllOf) *NullableEventsPageAllOf {
	return &NullableEventsPageAllOf{value: val, isSet: true}
}

func (v NullableEventsPageAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsPageAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


