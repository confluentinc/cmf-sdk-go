/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// SecretStatus Status for the secret
type SecretStatus struct {
	// The version of the secret
	Version *string `json:"version,omitempty"`
	// The environments to which the secret is attached to.
	Environments *[]string `json:"environments,omitempty"`
}

// NewSecretStatus instantiates a new SecretStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretStatus() *SecretStatus {
	this := SecretStatus{}
	return &this
}

// NewSecretStatusWithDefaults instantiates a new SecretStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretStatusWithDefaults() *SecretStatus {
	this := SecretStatus{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *SecretStatus) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretStatus) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *SecretStatus) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *SecretStatus) SetVersion(v string) {
	o.Version = &v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *SecretStatus) GetEnvironments() []string {
	if o == nil || o.Environments == nil {
		var ret []string
		return ret
	}
	return *o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretStatus) GetEnvironmentsOk() (*[]string, bool) {
	if o == nil || o.Environments == nil {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *SecretStatus) HasEnvironments() bool {
	if o != nil && o.Environments != nil {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []string and assigns it to the Environments field.
func (o *SecretStatus) SetEnvironments(v []string) {
	o.Environments = &v
}

func (o SecretStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Environments != nil {
		toSerialize["environments"] = o.Environments
	}
	return json.Marshal(toSerialize)
}

type NullableSecretStatus struct {
	value *SecretStatus
	isSet bool
}

func (v NullableSecretStatus) Get() *SecretStatus {
	return v.value
}

func (v *NullableSecretStatus) Set(val *SecretStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretStatus(val *SecretStatus) *NullableSecretStatus {
	return &NullableSecretStatus{value: val, isSet: true}
}

func (v NullableSecretStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


