/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// EventStatus struct for EventStatus
type EventStatus struct {
	// Human readable status message.
	Message *string `json:"message,omitempty"`
	// Type of the event
	Type *string `json:"type,omitempty"`
	Data *EventData `json:"data,omitempty"`
}

// NewEventStatus instantiates a new EventStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventStatus() *EventStatus {
	this := EventStatus{}
	return &this
}

// NewEventStatusWithDefaults instantiates a new EventStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventStatusWithDefaults() *EventStatus {
	this := EventStatus{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *EventStatus) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatus) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *EventStatus) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *EventStatus) SetMessage(v string) {
	o.Message = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventStatus) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatus) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventStatus) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventStatus) SetType(v string) {
	o.Type = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EventStatus) GetData() EventData {
	if o == nil || o.Data == nil {
		var ret EventData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStatus) GetDataOk() (*EventData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EventStatus) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given EventData and assigns it to the Data field.
func (o *EventStatus) SetData(v EventData) {
	o.Data = &v
}

func (o EventStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableEventStatus struct {
	value *EventStatus
	isSet bool
}

func (v NullableEventStatus) Get() *EventStatus {
	return v.value
}

func (v *NullableEventStatus) Set(val *EventStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEventStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEventStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventStatus(val *EventStatus) *NullableEventStatus {
	return &NullableEventStatus{value: val, isSet: true}
}

func (v NullableEventStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


