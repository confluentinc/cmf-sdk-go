/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// KafkaCatalogSpecKafkaClusters struct for KafkaCatalogSpecKafkaClusters
type KafkaCatalogSpecKafkaClusters struct {
	// the database name under which the Kafka cluster is listed in the Catalog
	DatabaseName string `json:"databaseName"`
	// connection options for the Kafka client
	ConnectionConfig map[string]string `json:"connectionConfig"`
	// an identifier to look up a Kubernetes secret that contains the connection credentials
	ConnectionSecretId *string `json:"connectionSecretId,omitempty"`
}

// NewKafkaCatalogSpecKafkaClusters instantiates a new KafkaCatalogSpecKafkaClusters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaCatalogSpecKafkaClusters(databaseName string, connectionConfig map[string]string) *KafkaCatalogSpecKafkaClusters {
	this := KafkaCatalogSpecKafkaClusters{}
	this.DatabaseName = databaseName
	this.ConnectionConfig = connectionConfig
	return &this
}

// NewKafkaCatalogSpecKafkaClustersWithDefaults instantiates a new KafkaCatalogSpecKafkaClusters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaCatalogSpecKafkaClustersWithDefaults() *KafkaCatalogSpecKafkaClusters {
	this := KafkaCatalogSpecKafkaClusters{}
	return &this
}

// GetDatabaseName returns the DatabaseName field value
func (o *KafkaCatalogSpecKafkaClusters) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *KafkaCatalogSpecKafkaClusters) GetDatabaseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *KafkaCatalogSpecKafkaClusters) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetConnectionConfig returns the ConnectionConfig field value
func (o *KafkaCatalogSpecKafkaClusters) GetConnectionConfig() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.ConnectionConfig
}

// GetConnectionConfigOk returns a tuple with the ConnectionConfig field value
// and a boolean to check if the value has been set.
func (o *KafkaCatalogSpecKafkaClusters) GetConnectionConfigOk() (*map[string]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConnectionConfig, true
}

// SetConnectionConfig sets field value
func (o *KafkaCatalogSpecKafkaClusters) SetConnectionConfig(v map[string]string) {
	o.ConnectionConfig = v
}

// GetConnectionSecretId returns the ConnectionSecretId field value if set, zero value otherwise.
func (o *KafkaCatalogSpecKafkaClusters) GetConnectionSecretId() string {
	if o == nil || o.ConnectionSecretId == nil {
		var ret string
		return ret
	}
	return *o.ConnectionSecretId
}

// GetConnectionSecretIdOk returns a tuple with the ConnectionSecretId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KafkaCatalogSpecKafkaClusters) GetConnectionSecretIdOk() (*string, bool) {
	if o == nil || o.ConnectionSecretId == nil {
		return nil, false
	}
	return o.ConnectionSecretId, true
}

// HasConnectionSecretId returns a boolean if a field has been set.
func (o *KafkaCatalogSpecKafkaClusters) HasConnectionSecretId() bool {
	if o != nil && o.ConnectionSecretId != nil {
		return true
	}

	return false
}

// SetConnectionSecretId gets a reference to the given string and assigns it to the ConnectionSecretId field.
func (o *KafkaCatalogSpecKafkaClusters) SetConnectionSecretId(v string) {
	o.ConnectionSecretId = &v
}

func (o KafkaCatalogSpecKafkaClusters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["databaseName"] = o.DatabaseName
	}
	if true {
		toSerialize["connectionConfig"] = o.ConnectionConfig
	}
	if o.ConnectionSecretId != nil {
		toSerialize["connectionSecretId"] = o.ConnectionSecretId
	}
	return json.Marshal(toSerialize)
}

type NullableKafkaCatalogSpecKafkaClusters struct {
	value *KafkaCatalogSpecKafkaClusters
	isSet bool
}

func (v NullableKafkaCatalogSpecKafkaClusters) Get() *KafkaCatalogSpecKafkaClusters {
	return v.value
}

func (v *NullableKafkaCatalogSpecKafkaClusters) Set(val *KafkaCatalogSpecKafkaClusters) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaCatalogSpecKafkaClusters) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaCatalogSpecKafkaClusters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaCatalogSpecKafkaClusters(val *KafkaCatalogSpecKafkaClusters) *NullableKafkaCatalogSpecKafkaClusters {
	return &NullableKafkaCatalogSpecKafkaClusters{value: val, isSet: true}
}

func (v NullableKafkaCatalogSpecKafkaClusters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaCatalogSpecKafkaClusters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


