/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"time"
)

// Environment Environment
type Environment struct {
	// The secrets mapping for the environment. This is a mapping between connection_secret_id and the secret name.
	Secrets *map[string]string `json:"secrets,omitempty"`
	// A unique name for the resource.
	Name string `json:"name"`
	CreatedTime *time.Time `json:"created_time,omitempty"`
	UpdatedTime *time.Time `json:"updated_time,omitempty"`
	FlinkApplicationDefaults *map[string]interface{} `json:"flinkApplicationDefaults,omitempty"`
	KubernetesNamespace string `json:"kubernetesNamespace"`
	// the defaults as YAML or JSON for ComputePools
	ComputePoolDefaults *map[string]interface{} `json:"computePoolDefaults,omitempty"`
	StatementDefaults *AllStatementDefaults1 `json:"statementDefaults,omitempty"`
}

// NewEnvironment instantiates a new Environment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironment(name string, kubernetesNamespace string) *Environment {
	this := Environment{}
	this.Name = name
	this.KubernetesNamespace = kubernetesNamespace
	return &this
}

// NewEnvironmentWithDefaults instantiates a new Environment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentWithDefaults() *Environment {
	this := Environment{}
	return &this
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *Environment) GetSecrets() map[string]string {
	if o == nil || o.Secrets == nil {
		var ret map[string]string
		return ret
	}
	return *o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetSecretsOk() (*map[string]string, bool) {
	if o == nil || o.Secrets == nil {
		return nil, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *Environment) HasSecrets() bool {
	if o != nil && o.Secrets != nil {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given map[string]string and assigns it to the Secrets field.
func (o *Environment) SetSecrets(v map[string]string) {
	o.Secrets = &v
}

// GetName returns the Name field value
func (o *Environment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Environment) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Environment) SetName(v string) {
	o.Name = v
}

// GetCreatedTime returns the CreatedTime field value if set, zero value otherwise.
func (o *Environment) GetCreatedTime() time.Time {
	if o == nil || o.CreatedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedTime
}

// GetCreatedTimeOk returns a tuple with the CreatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetCreatedTimeOk() (*time.Time, bool) {
	if o == nil || o.CreatedTime == nil {
		return nil, false
	}
	return o.CreatedTime, true
}

// HasCreatedTime returns a boolean if a field has been set.
func (o *Environment) HasCreatedTime() bool {
	if o != nil && o.CreatedTime != nil {
		return true
	}

	return false
}

// SetCreatedTime gets a reference to the given time.Time and assigns it to the CreatedTime field.
func (o *Environment) SetCreatedTime(v time.Time) {
	o.CreatedTime = &v
}

// GetUpdatedTime returns the UpdatedTime field value if set, zero value otherwise.
func (o *Environment) GetUpdatedTime() time.Time {
	if o == nil || o.UpdatedTime == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedTime
}

// GetUpdatedTimeOk returns a tuple with the UpdatedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetUpdatedTimeOk() (*time.Time, bool) {
	if o == nil || o.UpdatedTime == nil {
		return nil, false
	}
	return o.UpdatedTime, true
}

// HasUpdatedTime returns a boolean if a field has been set.
func (o *Environment) HasUpdatedTime() bool {
	if o != nil && o.UpdatedTime != nil {
		return true
	}

	return false
}

// SetUpdatedTime gets a reference to the given time.Time and assigns it to the UpdatedTime field.
func (o *Environment) SetUpdatedTime(v time.Time) {
	o.UpdatedTime = &v
}

// GetFlinkApplicationDefaults returns the FlinkApplicationDefaults field value if set, zero value otherwise.
func (o *Environment) GetFlinkApplicationDefaults() map[string]interface{} {
	if o == nil || o.FlinkApplicationDefaults == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.FlinkApplicationDefaults
}

// GetFlinkApplicationDefaultsOk returns a tuple with the FlinkApplicationDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetFlinkApplicationDefaultsOk() (*map[string]interface{}, bool) {
	if o == nil || o.FlinkApplicationDefaults == nil {
		return nil, false
	}
	return o.FlinkApplicationDefaults, true
}

// HasFlinkApplicationDefaults returns a boolean if a field has been set.
func (o *Environment) HasFlinkApplicationDefaults() bool {
	if o != nil && o.FlinkApplicationDefaults != nil {
		return true
	}

	return false
}

// SetFlinkApplicationDefaults gets a reference to the given map[string]interface{} and assigns it to the FlinkApplicationDefaults field.
func (o *Environment) SetFlinkApplicationDefaults(v map[string]interface{}) {
	o.FlinkApplicationDefaults = &v
}

// GetKubernetesNamespace returns the KubernetesNamespace field value
func (o *Environment) GetKubernetesNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.KubernetesNamespace
}

// GetKubernetesNamespaceOk returns a tuple with the KubernetesNamespace field value
// and a boolean to check if the value has been set.
func (o *Environment) GetKubernetesNamespaceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KubernetesNamespace, true
}

// SetKubernetesNamespace sets field value
func (o *Environment) SetKubernetesNamespace(v string) {
	o.KubernetesNamespace = v
}

// GetComputePoolDefaults returns the ComputePoolDefaults field value if set, zero value otherwise.
func (o *Environment) GetComputePoolDefaults() map[string]interface{} {
	if o == nil || o.ComputePoolDefaults == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ComputePoolDefaults
}

// GetComputePoolDefaultsOk returns a tuple with the ComputePoolDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetComputePoolDefaultsOk() (*map[string]interface{}, bool) {
	if o == nil || o.ComputePoolDefaults == nil {
		return nil, false
	}
	return o.ComputePoolDefaults, true
}

// HasComputePoolDefaults returns a boolean if a field has been set.
func (o *Environment) HasComputePoolDefaults() bool {
	if o != nil && o.ComputePoolDefaults != nil {
		return true
	}

	return false
}

// SetComputePoolDefaults gets a reference to the given map[string]interface{} and assigns it to the ComputePoolDefaults field.
func (o *Environment) SetComputePoolDefaults(v map[string]interface{}) {
	o.ComputePoolDefaults = &v
}

// GetStatementDefaults returns the StatementDefaults field value if set, zero value otherwise.
func (o *Environment) GetStatementDefaults() AllStatementDefaults1 {
	if o == nil || o.StatementDefaults == nil {
		var ret AllStatementDefaults1
		return ret
	}
	return *o.StatementDefaults
}

// GetStatementDefaultsOk returns a tuple with the StatementDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetStatementDefaultsOk() (*AllStatementDefaults1, bool) {
	if o == nil || o.StatementDefaults == nil {
		return nil, false
	}
	return o.StatementDefaults, true
}

// HasStatementDefaults returns a boolean if a field has been set.
func (o *Environment) HasStatementDefaults() bool {
	if o != nil && o.StatementDefaults != nil {
		return true
	}

	return false
}

// SetStatementDefaults gets a reference to the given AllStatementDefaults1 and assigns it to the StatementDefaults field.
func (o *Environment) SetStatementDefaults(v AllStatementDefaults1) {
	o.StatementDefaults = &v
}

func (o Environment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Secrets != nil {
		toSerialize["secrets"] = o.Secrets
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.CreatedTime != nil {
		toSerialize["created_time"] = o.CreatedTime
	}
	if o.UpdatedTime != nil {
		toSerialize["updated_time"] = o.UpdatedTime
	}
	if o.FlinkApplicationDefaults != nil {
		toSerialize["flinkApplicationDefaults"] = o.FlinkApplicationDefaults
	}
	if true {
		toSerialize["kubernetesNamespace"] = o.KubernetesNamespace
	}
	if o.ComputePoolDefaults != nil {
		toSerialize["computePoolDefaults"] = o.ComputePoolDefaults
	}
	if o.StatementDefaults != nil {
		toSerialize["statementDefaults"] = o.StatementDefaults
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironment struct {
	value *Environment
	isSet bool
}

func (v NullableEnvironment) Get() *Environment {
	return v.value
}

func (v *NullableEnvironment) Set(val *Environment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironment(val *Environment) *NullableEnvironment {
	return &NullableEnvironment{value: val, isSet: true}
}

func (v NullableEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


