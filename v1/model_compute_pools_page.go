/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ComputePoolsPage struct for ComputePoolsPage
type ComputePoolsPage struct {
	Pageable *Pageable `json:"pageable,omitempty"`
	Metadata *ComputePoolPageMetadata `json:"metadata,omitempty"`
	Items *[]ComputePool `json:"items,omitempty"`
}

// NewComputePoolsPage instantiates a new ComputePoolsPage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComputePoolsPage() *ComputePoolsPage {
	this := ComputePoolsPage{}
	return &this
}

// NewComputePoolsPageWithDefaults instantiates a new ComputePoolsPage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComputePoolsPageWithDefaults() *ComputePoolsPage {
	this := ComputePoolsPage{}
	return &this
}

// GetPageable returns the Pageable field value if set, zero value otherwise.
func (o *ComputePoolsPage) GetPageable() Pageable {
	if o == nil || o.Pageable == nil {
		var ret Pageable
		return ret
	}
	return *o.Pageable
}

// GetPageableOk returns a tuple with the Pageable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePoolsPage) GetPageableOk() (*Pageable, bool) {
	if o == nil || o.Pageable == nil {
		return nil, false
	}
	return o.Pageable, true
}

// HasPageable returns a boolean if a field has been set.
func (o *ComputePoolsPage) HasPageable() bool {
	if o != nil && o.Pageable != nil {
		return true
	}

	return false
}

// SetPageable gets a reference to the given Pageable and assigns it to the Pageable field.
func (o *ComputePoolsPage) SetPageable(v Pageable) {
	o.Pageable = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *ComputePoolsPage) GetMetadata() ComputePoolPageMetadata {
	if o == nil || o.Metadata == nil {
		var ret ComputePoolPageMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePoolsPage) GetMetadataOk() (*ComputePoolPageMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *ComputePoolsPage) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ComputePoolPageMetadata and assigns it to the Metadata field.
func (o *ComputePoolsPage) SetMetadata(v ComputePoolPageMetadata) {
	o.Metadata = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ComputePoolsPage) GetItems() []ComputePool {
	if o == nil || o.Items == nil {
		var ret []ComputePool
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ComputePoolsPage) GetItemsOk() (*[]ComputePool, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ComputePoolsPage) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ComputePool and assigns it to the Items field.
func (o *ComputePoolsPage) SetItems(v []ComputePool) {
	o.Items = &v
}

func (o ComputePoolsPage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pageable != nil {
		toSerialize["pageable"] = o.Pageable
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableComputePoolsPage struct {
	value *ComputePoolsPage
	isSet bool
}

func (v NullableComputePoolsPage) Get() *ComputePoolsPage {
	return v.value
}

func (v *NullableComputePoolsPage) Set(val *ComputePoolsPage) {
	v.value = val
	v.isSet = true
}

func (v NullableComputePoolsPage) IsSet() bool {
	return v.isSet
}

func (v *NullableComputePoolsPage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComputePoolsPage(val *ComputePoolsPage) *NullableComputePoolsPage {
	return &NullableComputePoolsPage{value: val, isSet: true}
}

func (v NullableComputePoolsPage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComputePoolsPage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


