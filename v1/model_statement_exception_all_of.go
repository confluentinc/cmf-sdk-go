/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatementExceptionAllOf struct for StatementExceptionAllOf
type StatementExceptionAllOf struct {
	// Name of the StatementException
	Name string `json:"name"`
	// Message of the StatementException
	Message string `json:"message"`
	// Timestamp when the StatementException was created
	Timestamp string `json:"timestamp"`
}

// NewStatementExceptionAllOf instantiates a new StatementExceptionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementExceptionAllOf(name string, message string, timestamp string) *StatementExceptionAllOf {
	this := StatementExceptionAllOf{}
	this.Name = name
	this.Message = message
	this.Timestamp = timestamp
	return &this
}

// NewStatementExceptionAllOfWithDefaults instantiates a new StatementExceptionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementExceptionAllOfWithDefaults() *StatementExceptionAllOf {
	this := StatementExceptionAllOf{}
	return &this
}

// GetName returns the Name field value
func (o *StatementExceptionAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StatementExceptionAllOf) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StatementExceptionAllOf) SetName(v string) {
	o.Name = v
}

// GetMessage returns the Message field value
func (o *StatementExceptionAllOf) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *StatementExceptionAllOf) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *StatementExceptionAllOf) SetMessage(v string) {
	o.Message = v
}

// GetTimestamp returns the Timestamp field value
func (o *StatementExceptionAllOf) GetTimestamp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *StatementExceptionAllOf) GetTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *StatementExceptionAllOf) SetTimestamp(v string) {
	o.Timestamp = v
}

func (o StatementExceptionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableStatementExceptionAllOf struct {
	value *StatementExceptionAllOf
	isSet bool
}

func (v NullableStatementExceptionAllOf) Get() *StatementExceptionAllOf {
	return v.value
}

func (v *NullableStatementExceptionAllOf) Set(val *StatementExceptionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementExceptionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementExceptionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementExceptionAllOf(val *StatementExceptionAllOf) *NullableStatementExceptionAllOf {
	return &NullableStatementExceptionAllOf{value: val, isSet: true}
}

func (v NullableStatementExceptionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementExceptionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


