/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// PostEnvironment Environment
type PostEnvironment struct {
	// A unique name for the resource.
	Name string `json:"name"`
	FlinkApplicationDefaults *map[string]interface{} `json:"flinkApplicationDefaults,omitempty"`
	KubernetesNamespace *string `json:"kubernetesNamespace,omitempty"`
	// the defaults as YAML or JSON for ComputePools
	ComputePoolDefaults *map[string]interface{} `json:"computePoolDefaults,omitempty"`
	StatementDefaults *AllStatementDefaults1 `json:"statementDefaults,omitempty"`
}

// NewPostEnvironment instantiates a new PostEnvironment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostEnvironment(name string) *PostEnvironment {
	this := PostEnvironment{}
	this.Name = name
	return &this
}

// NewPostEnvironmentWithDefaults instantiates a new PostEnvironment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostEnvironmentWithDefaults() *PostEnvironment {
	this := PostEnvironment{}
	return &this
}

// GetName returns the Name field value
func (o *PostEnvironment) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PostEnvironment) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PostEnvironment) SetName(v string) {
	o.Name = v
}

// GetFlinkApplicationDefaults returns the FlinkApplicationDefaults field value if set, zero value otherwise.
func (o *PostEnvironment) GetFlinkApplicationDefaults() map[string]interface{} {
	if o == nil || o.FlinkApplicationDefaults == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.FlinkApplicationDefaults
}

// GetFlinkApplicationDefaultsOk returns a tuple with the FlinkApplicationDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEnvironment) GetFlinkApplicationDefaultsOk() (*map[string]interface{}, bool) {
	if o == nil || o.FlinkApplicationDefaults == nil {
		return nil, false
	}
	return o.FlinkApplicationDefaults, true
}

// HasFlinkApplicationDefaults returns a boolean if a field has been set.
func (o *PostEnvironment) HasFlinkApplicationDefaults() bool {
	if o != nil && o.FlinkApplicationDefaults != nil {
		return true
	}

	return false
}

// SetFlinkApplicationDefaults gets a reference to the given map[string]interface{} and assigns it to the FlinkApplicationDefaults field.
func (o *PostEnvironment) SetFlinkApplicationDefaults(v map[string]interface{}) {
	o.FlinkApplicationDefaults = &v
}

// GetKubernetesNamespace returns the KubernetesNamespace field value if set, zero value otherwise.
func (o *PostEnvironment) GetKubernetesNamespace() string {
	if o == nil || o.KubernetesNamespace == nil {
		var ret string
		return ret
	}
	return *o.KubernetesNamespace
}

// GetKubernetesNamespaceOk returns a tuple with the KubernetesNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEnvironment) GetKubernetesNamespaceOk() (*string, bool) {
	if o == nil || o.KubernetesNamespace == nil {
		return nil, false
	}
	return o.KubernetesNamespace, true
}

// HasKubernetesNamespace returns a boolean if a field has been set.
func (o *PostEnvironment) HasKubernetesNamespace() bool {
	if o != nil && o.KubernetesNamespace != nil {
		return true
	}

	return false
}

// SetKubernetesNamespace gets a reference to the given string and assigns it to the KubernetesNamespace field.
func (o *PostEnvironment) SetKubernetesNamespace(v string) {
	o.KubernetesNamespace = &v
}

// GetComputePoolDefaults returns the ComputePoolDefaults field value if set, zero value otherwise.
func (o *PostEnvironment) GetComputePoolDefaults() map[string]interface{} {
	if o == nil || o.ComputePoolDefaults == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ComputePoolDefaults
}

// GetComputePoolDefaultsOk returns a tuple with the ComputePoolDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEnvironment) GetComputePoolDefaultsOk() (*map[string]interface{}, bool) {
	if o == nil || o.ComputePoolDefaults == nil {
		return nil, false
	}
	return o.ComputePoolDefaults, true
}

// HasComputePoolDefaults returns a boolean if a field has been set.
func (o *PostEnvironment) HasComputePoolDefaults() bool {
	if o != nil && o.ComputePoolDefaults != nil {
		return true
	}

	return false
}

// SetComputePoolDefaults gets a reference to the given map[string]interface{} and assigns it to the ComputePoolDefaults field.
func (o *PostEnvironment) SetComputePoolDefaults(v map[string]interface{}) {
	o.ComputePoolDefaults = &v
}

// GetStatementDefaults returns the StatementDefaults field value if set, zero value otherwise.
func (o *PostEnvironment) GetStatementDefaults() AllStatementDefaults1 {
	if o == nil || o.StatementDefaults == nil {
		var ret AllStatementDefaults1
		return ret
	}
	return *o.StatementDefaults
}

// GetStatementDefaultsOk returns a tuple with the StatementDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEnvironment) GetStatementDefaultsOk() (*AllStatementDefaults1, bool) {
	if o == nil || o.StatementDefaults == nil {
		return nil, false
	}
	return o.StatementDefaults, true
}

// HasStatementDefaults returns a boolean if a field has been set.
func (o *PostEnvironment) HasStatementDefaults() bool {
	if o != nil && o.StatementDefaults != nil {
		return true
	}

	return false
}

// SetStatementDefaults gets a reference to the given AllStatementDefaults1 and assigns it to the StatementDefaults field.
func (o *PostEnvironment) SetStatementDefaults(v AllStatementDefaults1) {
	o.StatementDefaults = &v
}

func (o PostEnvironment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.FlinkApplicationDefaults != nil {
		toSerialize["flinkApplicationDefaults"] = o.FlinkApplicationDefaults
	}
	if o.KubernetesNamespace != nil {
		toSerialize["kubernetesNamespace"] = o.KubernetesNamespace
	}
	if o.ComputePoolDefaults != nil {
		toSerialize["computePoolDefaults"] = o.ComputePoolDefaults
	}
	if o.StatementDefaults != nil {
		toSerialize["statementDefaults"] = o.StatementDefaults
	}
	return json.Marshal(toSerialize)
}

type NullablePostEnvironment struct {
	value *PostEnvironment
	isSet bool
}

func (v NullablePostEnvironment) Get() *PostEnvironment {
	return v.value
}

func (v *NullablePostEnvironment) Set(val *PostEnvironment) {
	v.value = val
	v.isSet = true
}

func (v NullablePostEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullablePostEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostEnvironment(val *PostEnvironment) *NullablePostEnvironment {
	return &NullablePostEnvironment{value: val, isSet: true}
}

func (v NullablePostEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


