/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// SecretMetadata Metadata about the secret
type SecretMetadata struct {
	// Name of the Secret
	Name string `json:"name"`
	// Timestamp when the Secret was created
	CreationTimestamp *string `json:"creationTimestamp,omitempty"`
	// Timestamp when the Secret was last updated
	UpdateTimestamp *string `json:"updateTimestamp,omitempty"`
	// Unique identifier of the Secret
	Uid *string `json:"uid,omitempty"`
	// Labels of the Secret
	Labels *map[string]string `json:"labels,omitempty"`
	// Annotations of the Secret
	Annotations *map[string]string `json:"annotations,omitempty"`
}

// NewSecretMetadata instantiates a new SecretMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretMetadata(name string) *SecretMetadata {
	this := SecretMetadata{}
	this.Name = name
	return &this
}

// NewSecretMetadataWithDefaults instantiates a new SecretMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretMetadataWithDefaults() *SecretMetadata {
	this := SecretMetadata{}
	return &this
}

// GetName returns the Name field value
func (o *SecretMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SecretMetadata) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SecretMetadata) SetName(v string) {
	o.Name = v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *SecretMetadata) GetCreationTimestamp() string {
	if o == nil || o.CreationTimestamp == nil {
		var ret string
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretMetadata) GetCreationTimestampOk() (*string, bool) {
	if o == nil || o.CreationTimestamp == nil {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *SecretMetadata) HasCreationTimestamp() bool {
	if o != nil && o.CreationTimestamp != nil {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given string and assigns it to the CreationTimestamp field.
func (o *SecretMetadata) SetCreationTimestamp(v string) {
	o.CreationTimestamp = &v
}

// GetUpdateTimestamp returns the UpdateTimestamp field value if set, zero value otherwise.
func (o *SecretMetadata) GetUpdateTimestamp() string {
	if o == nil || o.UpdateTimestamp == nil {
		var ret string
		return ret
	}
	return *o.UpdateTimestamp
}

// GetUpdateTimestampOk returns a tuple with the UpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretMetadata) GetUpdateTimestampOk() (*string, bool) {
	if o == nil || o.UpdateTimestamp == nil {
		return nil, false
	}
	return o.UpdateTimestamp, true
}

// HasUpdateTimestamp returns a boolean if a field has been set.
func (o *SecretMetadata) HasUpdateTimestamp() bool {
	if o != nil && o.UpdateTimestamp != nil {
		return true
	}

	return false
}

// SetUpdateTimestamp gets a reference to the given string and assigns it to the UpdateTimestamp field.
func (o *SecretMetadata) SetUpdateTimestamp(v string) {
	o.UpdateTimestamp = &v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *SecretMetadata) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretMetadata) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *SecretMetadata) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *SecretMetadata) SetUid(v string) {
	o.Uid = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *SecretMetadata) GetLabels() map[string]string {
	if o == nil || o.Labels == nil {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretMetadata) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *SecretMetadata) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *SecretMetadata) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *SecretMetadata) GetAnnotations() map[string]string {
	if o == nil || o.Annotations == nil {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretMetadata) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *SecretMetadata) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *SecretMetadata) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

func (o SecretMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.CreationTimestamp != nil {
		toSerialize["creationTimestamp"] = o.CreationTimestamp
	}
	if o.UpdateTimestamp != nil {
		toSerialize["updateTimestamp"] = o.UpdateTimestamp
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	return json.Marshal(toSerialize)
}

type NullableSecretMetadata struct {
	value *SecretMetadata
	isSet bool
}

func (v NullableSecretMetadata) Get() *SecretMetadata {
	return v.value
}

func (v *NullableSecretMetadata) Set(val *SecretMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretMetadata(val *SecretMetadata) *NullableSecretMetadata {
	return &NullableSecretMetadata{value: val, isSet: true}
}

func (v NullableSecretMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


