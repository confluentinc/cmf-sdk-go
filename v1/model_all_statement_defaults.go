/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// AllStatementDefaults struct for AllStatementDefaults
type AllStatementDefaults struct {
	StatementDefaults *AllStatementDefaults1 `json:"statementDefaults,omitempty"`
}

// NewAllStatementDefaults instantiates a new AllStatementDefaults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllStatementDefaults() *AllStatementDefaults {
	this := AllStatementDefaults{}
	return &this
}

// NewAllStatementDefaultsWithDefaults instantiates a new AllStatementDefaults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllStatementDefaultsWithDefaults() *AllStatementDefaults {
	this := AllStatementDefaults{}
	return &this
}

// GetStatementDefaults returns the StatementDefaults field value if set, zero value otherwise.
func (o *AllStatementDefaults) GetStatementDefaults() AllStatementDefaults1 {
	if o == nil || o.StatementDefaults == nil {
		var ret AllStatementDefaults1
		return ret
	}
	return *o.StatementDefaults
}

// GetStatementDefaultsOk returns a tuple with the StatementDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllStatementDefaults) GetStatementDefaultsOk() (*AllStatementDefaults1, bool) {
	if o == nil || o.StatementDefaults == nil {
		return nil, false
	}
	return o.StatementDefaults, true
}

// HasStatementDefaults returns a boolean if a field has been set.
func (o *AllStatementDefaults) HasStatementDefaults() bool {
	if o != nil && o.StatementDefaults != nil {
		return true
	}

	return false
}

// SetStatementDefaults gets a reference to the given AllStatementDefaults1 and assigns it to the StatementDefaults field.
func (o *AllStatementDefaults) SetStatementDefaults(v AllStatementDefaults1) {
	o.StatementDefaults = &v
}

func (o AllStatementDefaults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StatementDefaults != nil {
		toSerialize["statementDefaults"] = o.StatementDefaults
	}
	return json.Marshal(toSerialize)
}

type NullableAllStatementDefaults struct {
	value *AllStatementDefaults
	isSet bool
}

func (v NullableAllStatementDefaults) Get() *AllStatementDefaults {
	return v.value
}

func (v *NullableAllStatementDefaults) Set(val *AllStatementDefaults) {
	v.value = val
	v.isSet = true
}

func (v NullableAllStatementDefaults) IsSet() bool {
	return v.isSet
}

func (v *NullableAllStatementDefaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllStatementDefaults(val *AllStatementDefaults) *NullableAllStatementDefaults {
	return &NullableAllStatementDefaults{value: val, isSet: true}
}

func (v NullableAllStatementDefaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllStatementDefaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


