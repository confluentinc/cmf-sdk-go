/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// KafkaCatalog Represents a the configuration of a Kafka Catalog
type KafkaCatalog struct {
	// API version for spec
	ApiVersion string `json:"apiVersion"`
	// Kind of resource - set to resource type
	Kind string `json:"kind"`
	Metadata CatalogMetadata `json:"metadata"`
	Spec KafkaCatalogSpec `json:"spec"`
}

// NewKafkaCatalog instantiates a new KafkaCatalog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKafkaCatalog(apiVersion string, kind string, metadata CatalogMetadata, spec KafkaCatalogSpec) *KafkaCatalog {
	this := KafkaCatalog{}
	this.ApiVersion = apiVersion
	this.Kind = kind
	this.Metadata = metadata
	this.Spec = spec
	return &this
}

// NewKafkaCatalogWithDefaults instantiates a new KafkaCatalog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKafkaCatalogWithDefaults() *KafkaCatalog {
	this := KafkaCatalog{}
	return &this
}

// GetApiVersion returns the ApiVersion field value
func (o *KafkaCatalog) GetApiVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value
// and a boolean to check if the value has been set.
func (o *KafkaCatalog) GetApiVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ApiVersion, true
}

// SetApiVersion sets field value
func (o *KafkaCatalog) SetApiVersion(v string) {
	o.ApiVersion = v
}

// GetKind returns the Kind field value
func (o *KafkaCatalog) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *KafkaCatalog) GetKindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *KafkaCatalog) SetKind(v string) {
	o.Kind = v
}

// GetMetadata returns the Metadata field value
func (o *KafkaCatalog) GetMetadata() CatalogMetadata {
	if o == nil {
		var ret CatalogMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *KafkaCatalog) GetMetadataOk() (*CatalogMetadata, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *KafkaCatalog) SetMetadata(v CatalogMetadata) {
	o.Metadata = v
}

// GetSpec returns the Spec field value
func (o *KafkaCatalog) GetSpec() KafkaCatalogSpec {
	if o == nil {
		var ret KafkaCatalogSpec
		return ret
	}

	return o.Spec
}

// GetSpecOk returns a tuple with the Spec field value
// and a boolean to check if the value has been set.
func (o *KafkaCatalog) GetSpecOk() (*KafkaCatalogSpec, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Spec, true
}

// SetSpec sets field value
func (o *KafkaCatalog) SetSpec(v KafkaCatalogSpec) {
	o.Spec = v
}

func (o KafkaCatalog) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["metadata"] = o.Metadata
	}
	if true {
		toSerialize["spec"] = o.Spec
	}
	return json.Marshal(toSerialize)
}

type NullableKafkaCatalog struct {
	value *KafkaCatalog
	isSet bool
}

func (v NullableKafkaCatalog) Get() *KafkaCatalog {
	return v.value
}

func (v *NullableKafkaCatalog) Set(val *KafkaCatalog) {
	v.value = val
	v.isSet = true
}

func (v NullableKafkaCatalog) IsSet() bool {
	return v.isSet
}

func (v *NullableKafkaCatalog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKafkaCatalog(val *KafkaCatalog) *NullableKafkaCatalog {
	return &NullableKafkaCatalog{value: val, isSet: true}
}

func (v NullableKafkaCatalog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKafkaCatalog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


