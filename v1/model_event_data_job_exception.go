/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// EventDataJobException struct for EventDataJobException
type EventDataJobException struct {
	// The full exception string from the Flink job
	ExceptionString *string `json:"exceptionString,omitempty"`
}

// NewEventDataJobException instantiates a new EventDataJobException object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventDataJobException() *EventDataJobException {
	this := EventDataJobException{}
	return &this
}

// NewEventDataJobExceptionWithDefaults instantiates a new EventDataJobException object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventDataJobExceptionWithDefaults() *EventDataJobException {
	this := EventDataJobException{}
	return &this
}

// GetExceptionString returns the ExceptionString field value if set, zero value otherwise.
func (o *EventDataJobException) GetExceptionString() string {
	if o == nil || o.ExceptionString == nil {
		var ret string
		return ret
	}
	return *o.ExceptionString
}

// GetExceptionStringOk returns a tuple with the ExceptionString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventDataJobException) GetExceptionStringOk() (*string, bool) {
	if o == nil || o.ExceptionString == nil {
		return nil, false
	}
	return o.ExceptionString, true
}

// HasExceptionString returns a boolean if a field has been set.
func (o *EventDataJobException) HasExceptionString() bool {
	if o != nil && o.ExceptionString != nil {
		return true
	}

	return false
}

// SetExceptionString gets a reference to the given string and assigns it to the ExceptionString field.
func (o *EventDataJobException) SetExceptionString(v string) {
	o.ExceptionString = &v
}

func (o EventDataJobException) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExceptionString != nil {
		toSerialize["exceptionString"] = o.ExceptionString
	}
	return json.Marshal(toSerialize)
}

type NullableEventDataJobException struct {
	value *EventDataJobException
	isSet bool
}

func (v NullableEventDataJobException) Get() *EventDataJobException {
	return v.value
}

func (v *NullableEventDataJobException) Set(val *EventDataJobException) {
	v.value = val
	v.isSet = true
}

func (v NullableEventDataJobException) IsSet() bool {
	return v.isSet
}

func (v *NullableEventDataJobException) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventDataJobException(val *EventDataJobException) *NullableEventDataJobException {
	return &NullableEventDataJobException{value: val, isSet: true}
}

func (v NullableEventDataJobException) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventDataJobException) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


