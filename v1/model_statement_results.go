/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// StatementResults Results of the Statement
type StatementResults struct {
	Data *[]map[string]interface{} `json:"data,omitempty"`
}

// NewStatementResults instantiates a new StatementResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatementResults() *StatementResults {
	this := StatementResults{}
	return &this
}

// NewStatementResultsWithDefaults instantiates a new StatementResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatementResultsWithDefaults() *StatementResults {
	this := StatementResults{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *StatementResults) GetData() []map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatementResults) GetDataOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *StatementResults) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []map[string]interface{} and assigns it to the Data field.
func (o *StatementResults) SetData(v []map[string]interface{}) {
	o.Data = &v
}

func (o StatementResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableStatementResults struct {
	value *StatementResults
	isSet bool
}

func (v NullableStatementResults) Get() *StatementResults {
	return v.value
}

func (v *NullableStatementResults) Set(val *StatementResults) {
	v.value = val
	v.isSet = true
}

func (v NullableStatementResults) IsSet() bool {
	return v.isSet
}

func (v *NullableStatementResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatementResults(val *StatementResults) *NullableStatementResults {
	return &NullableStatementResults{value: val, isSet: true}
}

func (v NullableStatementResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatementResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


