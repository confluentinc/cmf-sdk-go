/*
Confluent Manager for Apache Flink / CMF

Apache Flink job lifecycle management component for Confluent Platform.

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// ResourceWithFlinkApplicationDefaults struct for ResourceWithFlinkApplicationDefaults
type ResourceWithFlinkApplicationDefaults struct {
	FlinkApplicationDefaults *map[string]interface{} `json:"flinkApplicationDefaults,omitempty"`
}

// NewResourceWithFlinkApplicationDefaults instantiates a new ResourceWithFlinkApplicationDefaults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceWithFlinkApplicationDefaults() *ResourceWithFlinkApplicationDefaults {
	this := ResourceWithFlinkApplicationDefaults{}
	return &this
}

// NewResourceWithFlinkApplicationDefaultsWithDefaults instantiates a new ResourceWithFlinkApplicationDefaults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithFlinkApplicationDefaultsWithDefaults() *ResourceWithFlinkApplicationDefaults {
	this := ResourceWithFlinkApplicationDefaults{}
	return &this
}

// GetFlinkApplicationDefaults returns the FlinkApplicationDefaults field value if set, zero value otherwise.
func (o *ResourceWithFlinkApplicationDefaults) GetFlinkApplicationDefaults() map[string]interface{} {
	if o == nil || o.FlinkApplicationDefaults == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.FlinkApplicationDefaults
}

// GetFlinkApplicationDefaultsOk returns a tuple with the FlinkApplicationDefaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceWithFlinkApplicationDefaults) GetFlinkApplicationDefaultsOk() (*map[string]interface{}, bool) {
	if o == nil || o.FlinkApplicationDefaults == nil {
		return nil, false
	}
	return o.FlinkApplicationDefaults, true
}

// HasFlinkApplicationDefaults returns a boolean if a field has been set.
func (o *ResourceWithFlinkApplicationDefaults) HasFlinkApplicationDefaults() bool {
	if o != nil && o.FlinkApplicationDefaults != nil {
		return true
	}

	return false
}

// SetFlinkApplicationDefaults gets a reference to the given map[string]interface{} and assigns it to the FlinkApplicationDefaults field.
func (o *ResourceWithFlinkApplicationDefaults) SetFlinkApplicationDefaults(v map[string]interface{}) {
	o.FlinkApplicationDefaults = &v
}

func (o ResourceWithFlinkApplicationDefaults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FlinkApplicationDefaults != nil {
		toSerialize["flinkApplicationDefaults"] = o.FlinkApplicationDefaults
	}
	return json.Marshal(toSerialize)
}

type NullableResourceWithFlinkApplicationDefaults struct {
	value *ResourceWithFlinkApplicationDefaults
	isSet bool
}

func (v NullableResourceWithFlinkApplicationDefaults) Get() *ResourceWithFlinkApplicationDefaults {
	return v.value
}

func (v *NullableResourceWithFlinkApplicationDefaults) Set(val *ResourceWithFlinkApplicationDefaults) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceWithFlinkApplicationDefaults) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceWithFlinkApplicationDefaults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceWithFlinkApplicationDefaults(val *ResourceWithFlinkApplicationDefaults) *NullableResourceWithFlinkApplicationDefaults {
	return &NullableResourceWithFlinkApplicationDefaults{value: val, isSet: true}
}

func (v NullableResourceWithFlinkApplicationDefaults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceWithFlinkApplicationDefaults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


